AWSTemplateFormatVersion: '2010-09-09'
Description: A beginners template to cloudformation
Parameters:
  NamingPrefix:
    Description: How to prefix resource names
    Type: String
  Email:
    Description: Email subscription to the topic
    Type: String
Resources:
  S3InvokePermissionIngestion:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Lambda
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn:
        Fn::Join:
          - ''
          - - "arn:aws:s3:::"
            - !Sub '${NamingPrefix}-bucket'
  Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - S3InvokePermissionIngestion
    Properties:
      BucketName: !Sub '${NamingPrefix}-bucket'
      BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
      NotificationConfiguration:
        LambdaConfigurations:
          -
            Function: !GetAtt Lambda.Arn
            Event: "s3:ObjectCreated:*"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/CloudWatchFullAccess
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      - arn:aws:iam::aws:policy/SecretsManagerReadWrite
  Lambda:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub '${NamingPrefix}-lambda'
      Description: Does Something With S3 objects
      Handler: "index.lambda_handler"
      Role: !GetAtt "LambdaExecutionRole.Arn"
      Code:
        ZipFile: |
          import json
          import os
          import boto3
          client = boto3.client('sns')

          def publish_message(arn, subject, message):
            response = client.publish(
              TopicArn=arn,
              Message=message,
              Subject=subject
          )

          def lambda_handler(event, context):
            topic = os.environ['Topic']
            print(json.dumps(event))
            for record in event['Records']:
              bucket = record['s3']['bucket']['name']
              key = record['s3']['object']['key']
              subject = 'File Received'
              message = f'bucket: {bucket}, key: {key}'
              publish_message(topic, subject, message)

      Environment:
        Variables:
          Topic: !Ref Topic
      Runtime: "python3.6"
      Timeout: 25

  Topic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: "email"
Outputs:
  BucketName:
    Description: 'Bucket name'
    Value: !Ref Bucket
